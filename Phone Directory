class TrieNode{
    public:
       char data;
       TrieNode* children[26];
       bool isTerminal;
       TrieNode(char ch)
       {
          data=ch;
          for(int i=0;i<26;i++)
          {
              children[i]=NULL;
          }
          isTerminal=false;
       }
};

class Trie{
    public:
      TrieNode* root;
      Trie()
      {
          root=new TrieNode('\0');
      }
      
      void insertUtil(TrieNode* root,string s)
      {
          if(s.length()==0)
          {
              root->isTerminal=true;
              return;
          }
          int i=s[0]-'a';
          TrieNode* child;
          if(root->children[i]!=NULL)
          {
              child=root->children[i];
          }
          else{
              child=new TrieNode(s[0]);
              root->children[i]=child;
          }
          insertUtil(child,s.substr(1));
      }
      void insert(string s)
      {
          insertUtil(root,s);
      }
      
      
      
      void printSuggestion(TrieNode* curr,vector<string>& temp,string prefix)
      {
          if(curr->isTerminal)
          {
              temp.push_back(prefix);
          }
          for(char ch='a';ch<='z';ch++)
          {
              TrieNode* next=curr->children[ch-'a'];
              if(next!=NULL){
                  prefix.push_back(ch);
                  printSuggestion(next,temp,prefix);
                  temp.pop_back();
              }
          }
      }
     vector<vector<string>> getSuggestion(string s)
    {
    string prefix = "";
    vector<vector<string>> ans;
    TrieNode* prev = root;
    
    for (int i = 0; i < s.length(); i++)
    {
        char lastChar = s[i];
        prefix.push_back(s[i]);

        TrieNode* curr = prev->children[lastChar - 'a'];
        if (curr == NULL)  
        {
            break;
        }

        vector<string> temp;
        printSuggestion(curr, temp, prefix);
        ans.push_back(temp);

        prev = curr; 
    }
    return ans;
    }

};
class Solution{
public:
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        Trie* t=new Trie();
        for(int i=0;i<n;i++)
        {
           t->insert(contact[i]);
        }
        
        return t->getSuggestion(s);
    }
};
