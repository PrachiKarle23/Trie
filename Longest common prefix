class TrieNode{
    public:
      char data;
      TrieNode* children[26];
      int cnt;
      bool isTerminal;
      TrieNode(char ch)
      {
          data=ch;
          for(int i=0;i<26;i++)
          {
              children[i]=NULL;
          }
          isTerminal=false;
          cnt=0;
      }
};
class Trie{
    public:
      TrieNode* root;
      Trie(int ch){
          root=new TrieNode(ch);
      }
      void insert(TrieNode* root,string word)
      {
         if(word.length()==0){
           root->isTerminal=true;
           return;
         }
         int ind=word[0]-'a';
         TrieNode* child;
         if(root->children[ind]!=NULL)
         {
            child=root->children[ind];
         }
         else{
            child=new TrieNode(word[0]);
            root->cnt++;
            root->children[ind]=child;
         }
         insert(child,word.substr(1));
     }
     void insertUtil(string word){
        insert(root,word);
     }
     void lcp(string str,string &ans)
     {
        for(int i=0;i<str.length();i++)
        {
            char ch=str[i];
            if(root->cnt==1)
            {
                ans.push_back(ch);
                int index=ch-'a';
                root=root->children[index];
            }
            else{
                break;
            }
            if(root->isTerminal)
            {
                break;
            }
          } 
     }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    Trie *t=new Trie('\0');
    for(int i=0;i<n;i++)
    {
        t->insertUtil(arr[i]);
        
    }
    string first=arr[0];
    string ans="";
    t->lcp(first,ans);
    return ans;
}


