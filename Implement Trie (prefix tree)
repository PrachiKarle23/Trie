class TrieNode{
    public:
      char data;
      TrieNode* children[26];
      int cnt;
      bool isTerminal;
      TrieNode(char ch)
      {
          data=ch;
          for(int i=0;i<26;i++)
          {
              children[i]=NULL;
          }
          isTerminal=false;
          cnt=0;
      }
};
class Trie {
public:
    TrieNode* root;

    Trie() {
        root=new TrieNode('\0');
    }
    void insertUtil(TrieNode* root,string word){
        if(word.length()==0){
            root->isTerminal=true;
            return;
        }
        int ind=word[0]-'a';
        TrieNode* child;
        if(root->children[ind]!=NULL){
            child=root->children[ind];
        }
        else{
            child=new TrieNode(word[0]);
            root->children[ind]=child;
        }
        insertUtil(child,word.substr(1));
    }
    void insert(string word) {
        insertUtil(root,word);
    }
    
    bool searchUtil(TrieNode* root,string word)
    {
        if(word.length()==0){
            return root->isTerminal;
        }
        int ind=word[0]-'a';
        TrieNode* child;
        if(root->children[ind]!=NULL){
            child=root->children[ind];
        }
        else{
            return false;
        }
        return searchUtil(child,word.substr(1));
    }
    bool search(string word) {
        return searchUtil(root,word);
    }
    bool start(TrieNode* root,string prefix)
    {
        if(prefix.length()==0){
            return true;
        }
        int ind=prefix[0]-'a';
        TrieNode* child;
        if(root->children[ind]!=NULL){
            child=root->children[ind];
        }
        else{
            return false;
        }
        return start(child,prefix.substr(1));
    }
    bool startsWith(string prefix) {
        return start(root,prefix);
    }
};
