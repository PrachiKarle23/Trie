
#include <iostream>
#include <vector>
using namespace std;


class TrieNode{
    public:
       char data;
       TrieNode* children[26];
       bool isTerminal;
       TrieNode(char ch)
       {
           data=ch;
           for(int i=0;i<26;i++)
           {
               children[i]=NULL;
           }
           isTerminal=false;
       }
};
class Trie{
    public:
       TrieNode* root;
       Trie()
       {
           root=new TrieNode('\0');
       }
       void insertUtil(TrieNode* root,string s)
       {
           if(s.length()==0)
           {
               root->isTerminal=true;
               return;
           }
           
           int i=s[0]-'0';
           TrieNode* child;
           if(root->children[i]!=NULL)
           {
               child=root->children[i];
           }
           else{
               child=new TrieNode(s[0]);
               root->children[i]=child;
           }
           insertUtil(child,s.substr(1));
       }
       void insert(string s)
       {
           insertUtil(root,s);
       }
       bool searchUtil(TrieNode* root,string s)
       {
           if(s.length()==0){
               return root->isTerminal;
           }
           
           int i=s[0]-'0';
           TrieNode* child;
           if(root->children[i]!=NULL)
           {
               child=root->children[i];
           }
           else{
               return false;
           }
           return searchUtil(child,s.substr(1));
       }
       bool search(string s)
       {
           return searchUtil(root,s);
       }
};
int main() {
    Trie * t=new Trie();
    vector<string>a={"ans","and","ant","dad","do"};
    for(int i=0;i<a.size();i++)
    {
        t->insert(a[i]);
    }
    cout<<t->search("ands")<<endl;
    cout<<t->search("and");
    return 0;
}
