class TrieNode{
    public:
       char data;
       TrieNode* children[26];
       bool isTerminal;
       TrieNode(char c)
       {
           data=c;
           for(int i=0;i<26;i++)
           {
               children[i]=NULL;
           }
           isTerminal = false;
       }
};

class Trie{
    public:
       TrieNode* root;
       Trie()
       {
           root=new TrieNode('\0');
       }
       
       
       void insertutil(TrieNode* root,string word)
       {
           if(word.length()==0){
               root->isTerminal=true;
               return;
           } 
           int ind=word[0]-'0';
           TrieNode* child;
           if(root->children[ind]!=NULL)
           {
               child=root->children[ind];
           }
           else {
               child=new TrieNode(word[0]);
               root->children[ind]=child;
           }
           insertutil(child,word.substr(1));
       }
       void insert(string word)
       {
         
           insertutil(root,word);
       }
       
       
       
       bool searchutil(TrieNode* root,string word)
       {
           if(word.length()==0){
               return root->isTerminal;
           }
           int ind=word[0]-'0';
           TrieNode* child;
           if(root->children[ind]!=NULL){
               child=root->children[ind];
           }
           else{
               return false;
           }
           return searchutil(child,word.substr(1));
       }
       bool search(string word)
       {
           
           return searchutil(root,word);
       }
};



class Solution
{
    public:

    vector<vector<int>> uniqueRow(int M[MAX][MAX],int row,int col)
    {
        vector<vector<int>>ans;
        Trie* t=new Trie();
        for(int i=0;i<row;i++)
        {
            vector<int>temp;
            string s="";
            for(int j=0;j<col;j++)
            {
                temp.push_back(M[i][j]);
                if(M[i][j]==1){
                    s+='1';
                }
                else{
                    s+='0';
                }
            }
            
            if(t->search(s)){
                continue;
            }
            else{
                ans.push_back(temp);
                t->insert(s);
            }
        }
        return ans;
        
    }
};
